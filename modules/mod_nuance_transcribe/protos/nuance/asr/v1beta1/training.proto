//  Copyright (C) 2018 - 2021 Nuance Communications, Inc. All Rights Reserved.
//
//  The copyright to the computer program(s) herein is the property of
//  Nuance Communications, Inc. The program(s) may be used and/or copied
//  only with the written permission from Nuance Communications, Inc.
//  or in accordance with the terms and conditions stipulated in the
//  agreement/contract under which the program(s) have been supplied.

syntax = "proto3";

package nuance.asr.v1beta1;

import "nuance/rpc/status.proto";

option java_multiple_files = true;
option java_package = "com.nuance.rpc.asr.v1beta1";
option java_outer_classname = "TrainingProto";

/*
ASR Training APIs
*/
service Training {
  rpc CompileWordsetAndWatch (CompileWordsetRequest) returns (stream WatchJobStatusResponse);  // Submit and watch for job completion (server streaming).
  rpc GetWordsetMetadata (GetWordsetMetadataRequest) returns (GetWordsetMetadataResponse);     // Gets a compiled wordset's metadata (unary).
  rpc DeleteWordset (DeleteWordsetRequest) returns (DeleteWordsetResponse);                    // Delete the compiled wordset (unary).
}

/*
Request to compile a wordset.
*/
message CompileWordsetRequest {
  string wordset = 1;                                 // Inline wordset JSON resource. Note: 4 MB request size limit! (required)
  ResourceReference companion_artifact_reference = 2; // Reference to the companion artifact to use during compilation (required)
  ResourceReference target_artifact_reference = 3;    // Reference for the generated target artifact (required)
  map<string, string> metadata = 4;                   // Optional client-supplied key,value pairs to associate with the artifact
  map<string, string> client_data = 5;                // Optional client-supplied key,value pairs to inject into the logs
} 

/*
Response to a CompileWordsetRequest request.
*/
message WatchJobStatusResponse {
  JobStatusUpdate job_status_update = 1;            // Job status update
  nuance.rpc.Status request_status = 2;             // This is the request status returned. Indicates whether the request was success or failure
}

/*
Request to a GetWordsetMetadata request.
*/
message GetWordsetMetadataRequest {
  ResourceReference artifact_reference = 1;         // Reference to the wordset artifact (required)
}
  
/*
Response to a GetWordsetMetadata request.
*/
message GetWordsetMetadataResponse {
  map<string, string> metadata = 1;                 // Repeated. default + client-supplied key,value pairs
  nuance.rpc.Status request_status = 2;             // This is the request status returned. Indicates whether the request was success or failure
}

/*
Request to a DeleteWordset request.
*/
message DeleteWordsetRequest {
  ResourceReference artifact_reference = 1;         // Reference to the wordset artifact (required)
}

/*
Response to a DeleteWordset request.
*/
message DeleteWordsetResponse {
  nuance.rpc.Status request_status = 1;            	// This is the request status returned. Indicates whether the request was success or failure
}

/*
Job status update 
*/
message JobStatusUpdate {    
  string job_id = 1;                              	// Job Id, a unique identifier.
  JobStatus status = 2;                             // This is job status. Indicates the job was success or failure  
  repeated JobMessage messages = 3;                 // Messages specifying about the job (e.g. errors) if any
}

/*
Job Message
*/
message JobMessage {
  int32 code = 1;                           // Message code
  string message = 2;                       // This is job message
  map<string, string> data = 3;             // Additional key/value pairs
}

/*
Job Status Enum
*/
enum JobStatus {
  JOB_STATUS_UNSPECIFIED = 0;               // Job status not specified or unknown   
  JOB_STATUS_QUEUED = 1;                    // Job status is queued
  JOB_STATUS_PROCESSING = 2;                // Job status is processing
  JOB_STATUS_COMPLETE = 3;                  // Job status is complete
  JOB_STATUS_FAILED = 4;                    // Job status is failed
}

/*
Input message for fetching an external resource.
*/
message ResourceReference {
  string uri = 2;                    // This is location of the resource as a URN reference
  map<string, string> headers = 8;   // Optional field for internal use
}
